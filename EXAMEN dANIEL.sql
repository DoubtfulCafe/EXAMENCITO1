--Crear nuevo usuario(esquema) con el password "PASSWORD" 
CREATE USER YOUTUBE
  IDENTIFIED BY "oracle"
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP;
--asignar cuota ilimitada al tablespace por defecto  
ALTER USER YOUTUBE QUOTA UNLIMITED ON USERS;

--Asignar privilegios basicos
GRANT create session TO YOUTUBE;
GRANT create table TO YOUTUBE;
GRANT create view TO YOUTUBE;
GRANT create any trigger TO YOUTUBE;
GRANT create any procedure TO YOUTUBE;
GRANT create sequence TO YOUTUBE;
GRANT create synonym TO YOUTUBE;
GRANT create materialized view TO YOUTUBE;

CREATE OR REPLACE PROCEDURE P_calcular_salario_incremento(
    P_PUESTO JOBS.JOB_TITLE%TYPE,
    P_DEPARTAMENTO DEPARTMENTS.DEPARTMENT_NAME%TYPE
) IS
    V_SALARIO_PROMEDIO NUMBER;
    V_PORCENTAJE NUMBER;
BEGIN
    SELECT AVG(A.SALARY) 
    INTO V_SALARIO_PROMEDIO
    FROM EMPLOYEES A
    LEFT JOIN JOBS B
    ON (A.JOB_ID = B.JOB_ID)
    LEFT JOIN DEPARTMENTS C
    ON (A.DEPARTMENT_ID = C.DEPARTMENT_ID)
    WHERE B.JOB_TITLE = P_PUESTO
    AND C.DEPARTMENT_NAME = P_DEPARTAMENTO;

    DBMS_OUTPUT.PUT_LINE('SALARIO PROMEDIO: ' || V_SALARIO_PROMEDIO);

    CASE 
        WHEN V_SALARIO_PROMEDIO > 5000 THEN
            V_PORCENTAJE := 0.1;
        WHEN V_SALARIO_PROMEDIO BETWEEN 3000 AND 5000 THEN
            V_PORCENTAJE := 0.05;
        WHEN V_SALARIO_PROMEDIO < 3000 THEN
            V_PORCENTAJE := 0.02;
        ELSE  
            V_PORCENTAJE := 0;
    END CASE;

    UPDATE EMPLOYEES 
    SET SALARY = SALARY + (SALARY * V_PORCENTAJE)
    WHERE JOB_ID = (SELECT JOB_ID FROM JOBS WHERE JOB_TITLE = P_PUESTO)
    AND DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = P_DEPARTAMENTO);
    
    DBMS_OUTPUT.PUT_LINE('EMPLEADOS ACTUALIZADOS CON EXITO');
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ALGO FALLÓ');
        ROLLBACK;
END;



SET SERVEROUTPUT ON;

BEGIN
    P_calcular_salario_incremento('Programmer', 'IT');
END;


CREATE TABLE EMPLOYEES_BACKUP AS 
SELECT * FROM EMPLOYEES;



select a.*, ((b.salary - a.salary )/ a.salary) * 100 as aumennto
from employees_backup a
inner join employees b
on (a.employee_id = b.employee_id);


SELECT * FROM HR.EMPLOYEES
WHERE;
SELECT * FROM HR.JOBS;
SELECT * FROM HR.DEPARTMENTS;


SELECT A.DEPARTMENT_ID, B.JOB_TITLE, AVG(A.SALARY) 
    --INTO V_SALARIO_PROMEDIO
    FROM EMPLOYEES A
    LEFT JOIN JOBS B
    ON (A.JOB_ID = B.JOB_ID)
    LEFT JOIN DEPARTMENTS C
    ON (A.DEPARTMENT_ID = C.DEPARTMENT_ID)
    WHERE B.JOB_TITLE = 'Programmer'
    AND C.DEPARTMENT_NAME = 'IT'
    GROUP BY A.DEPARTMENT_ID, B.JOB_TITLE;

    /*Cree un procedimiento almacenado llamado update_employee_department 
que actualice el departamento de un empleado. 
El procedimiento debe tomar tres parámetros: 
el ID del empleado, el ID del nuevo departamento y el ID del nuevo administrador 
del empleado.

Antes de actualizar, el procedimiento debe verificar si el nuevo 
ID de departamento y el ID de administrador existen en la tabla de 
departamentos y en la tabla de empleados, respectivamente. 

Si el departamento o el gerente no existe, el procedimiento debería 
generar una excepción personalizada denominada Invalid_Department_or_Manager.

Si el departamento y el gerente existen, el procedimiento debe 
actualizar el departamento y el gerente del empleado en consecuencia.
*/



CREATE OR REPLACE PROCEDURE p_update_employee_department (
    P_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE,
    P_DEPARMENT_ID DEPARTMENTS.DEPARTMENT_ID%TYPE,
    P_MANAGER_ID EMPLOYEES.EMPLOYEE_ID%TYPE
) AS
    V_Invalid_Department_or_Manager EXCEPTION;
    V_CANTIDAD_DEPARTAMENTOS NUMBER;
    V_CANTIDAD_EMPLEADOS NUMBER;
    
BEGIN
    SELECT COUNT(1) 
    INTO V_CANTIDAD_DEPARTAMENTOS
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID  = P_DEPARMENT_ID;
    
    SELECT COUNT(1) 
    INTO V_CANTIDAD_EMPLEADOS
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID  = P_MANAGER_ID;
    
    IF (V_CANTIDAD_DEPARTAMENTOS <= 0 OR V_CANTIDAD_EMPLEADOS <= 0) THEN
        RAISE V_Invalid_Department_or_Manager;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('EL PROGRAMA CONTINUA PORQUE SI EXISTEN..');
    
    UPDATE EMPLOYEES
    SET DEPARTMENT_ID = P_DEPARMENT_ID,
    MANAGER_ID = P_MANAGER_ID
    WHERE EMPLOYEE_ID = P_EMPLOYEE_ID;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('SE ACTUALIZÓ EL EMPLEADO');
    
EXCEPTION
    WHEN V_Invalid_Department_or_Manager THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE EL DEPARTAMENTO O EL MANAGER');
        ROLLBACK;
END;

SELECT * FROM EMPLOYEES;


BEGIN
    p_update_employee_department(
        P_DEPARMENT_ID => 50, 
        P_MANAGER_ID => 123,
        P_EMPLOYEE_ID => 206
    );
END;

SELECT COUNT(1) FROM DEPARTMENTS
WHERE DEPARTMENT_ID  = 3453534;


SELECT * FROM EMPLOYEES;

205 => 123
110 => 50


---GENERAR EL HTML NECESARIO PARA UNA TABLA DE EMPLEADOS
---QUE EL RESULTADO SEA UN PARAMETRO DE SALIDA.



CREATE OR REPLACE PROCEDURE P_GENERAR_HTML_EMPLEADOS (P_HTML OUT VARCHAR) AS
BEGIN
    P_HTML := '<table>';
    P_HTML := P_HTML || '<thead><tr><th>Nombre</th><th>Departamento</th><th>Puesto</th></tr></thead>';
    P_HTML := P_HTML || '<tbody>';
    
    -- CURSOR IMPLICITO:
    FOR V_EMPLEADO IN (
        SELECT A.FIRST_NAME || ' ' || LAST_NAME AS NAME,
            B.DEPARTMENT_NAME,
            C.JOB_TITLE
        FROM EMPLOYEES A
        LEFT JOIN DEPARTMENTS B
        ON (A.DEPARTMENT_ID = B.DEPARTMENT_ID)
        LEFT JOIN JOBS C
        ON (A.JOB_ID = C.JOB_ID)
    ) LOOP
        P_HTML :=   P_HTML || '<tr><td>' 
                    || V_EMPLEADO.NAME 
                    || '</td><td>'
                    || V_EMPLEADO.DEPARTMENT_NAME 
                    || '</td><td>'
                    || V_EMPLEADO.JOB_TITLE
                    || '</td></tr>';
    END LOOP;
    
    P_HTML := P_HTML || '</tbody>';
    P_HTML := P_HTML || '</table>';
END;



DECLARE 
    V_HTML VARCHAR2(32767);
BEGIN
    P_GENERAR_HTML_EMPLEADOS(V_HTML);
    DBMS_OUTPUT.PUT_LINE(V_HTML);
END;


SELECT A.FIRST_NAME || ' ' || LAST_NAME AS NAME,
    B.DEPARTMENT_NAME,
    C.JOB_TITLE
FROM EMPLOYEES A
LEFT JOIN DEPARTMENTS B
ON (A.DEPARTMENT_ID = B.DEPARTMENT_ID)
LEFT JOIN JOBS C
ON (A.JOB_ID = C.JOB_ID)


-Bloques Anonimos
--Procedimientos Almacenados
--Funciones
--Paquetes


CREATE OR REPLACE FUNCTION F_SUMAR(A NUMBER, B NUMBER) 
RETURN NUMBER IS 
BEGIN
    RETURN A + B;
END F_SUMAR;


BEGIN
    DBMS_OUTPUT.PUT_LINE('RESULTADO: ' || F_SUMAR(5, 6));
END;

SELECT F_SUMAR(5, 6) 
FROM DUAL;


---CREAR FUNCION QUE RETORNE EL SALARIO TOTAL DE UN DEPARTAMENTO QUE SE ENVIE DE PARAMETRO


CREATE OR REPLACE FUNCTION F_SALARIO_DEPARTAMENTO (P_DEPARTMENT_ID NUMBER)
RETURN NUMBER IS
    V_SALARIO_TOTAL NUMBER;
BEGIN
    SELECT SUM(SALARY)
    INTO V_SALARIO_TOTAL
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID = P_DEPARTMENT_ID;
    
    RETURN V_SALARIO_TOTAL;
END;


SELECT F_SALARIO_DEPARTAMENTO(20)
FROM DUAL;


SELECT (6000/19000) * 100 --31.57%
FROM DUAL;

SELECT (13000/19000) * 100 --68.42.57%
FROM DUAL;

SELECT  FIRST_NAME, 
        LAST_NAME, 
        ROUND((SALARY/F_SALARIO_DEPARTAMENTO(DEPARTMENT_ID)) * 100, 2) AS PORCENTAJE 
FROM EMPLOYEES;

SELECT  UPPER(FIRST_NAME), 
        LOWER(LAST_NAME), 
        TRUNC((SALARY/F_SALARIO_DEPARTAMENTO(DEPARTMENT_ID)) * 100) AS PORCENTAJE 
FROM EMPLOYEES;



create or replace NONEDITIONABLE PACKAGE PKG_EMPLOYEES IS
    PROCEDURE P_INSERT(
        P_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE, 
        P_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE, 
        P_LAST_NAME EMPLOYEES.LAST_NAME%TYPE, 
        P_EMAIL EMPLOYEES.EMAIL%TYPE, 
        P_PHONE_NUMBER EMPLOYEES.PHONE_NUMBER%TYPE, 
        P_HIRE_DATE EMPLOYEES.HIRE_DATE%TYPE, 
        P_JOB_ID EMPLOYEES.JOB_ID%TYPE, 
        P_SALARY EMPLOYEES.SALARY%TYPE,
        P_COMMISSION_PCT EMPLOYEES.COMMISSION_PCT%TYPE, 
        P_MANAGER_ID EMPLOYEES.MANAGER_ID%TYPE, 
        P_DEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE,
        P_CODIGO_RESULTADO OUT NUMBER,
        P_MENSAJE_RESULTADO OUT VARCHAR
    );

    PROCEDURE P_UPDATE(
        P_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE, 
        P_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE, 
        P_LAST_NAME EMPLOYEES.LAST_NAME%TYPE, 
        P_EMAIL EMPLOYEES.EMAIL%TYPE, 
        P_PHONE_NUMBER EMPLOYEES.PHONE_NUMBER%TYPE, 
        P_HIRE_DATE EMPLOYEES.HIRE_DATE%TYPE, 
        P_JOB_ID EMPLOYEES.JOB_ID%TYPE, 
        P_SALARY EMPLOYEES.SALARY%TYPE,
        P_COMMISSION_PCT EMPLOYEES.COMMISSION_PCT%TYPE, 
        P_MANAGER_ID EMPLOYEES.MANAGER_ID%TYPE, 
        P_DEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE
    );

    PROCEDURE P_DELETE(
        P_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE
    );

END PKG_EMPLOYEES;




create or replace NONEDITIONABLE PACKAGE BODY PKG_EMPLOYEES IS
    PROCEDURE P_INSERT(
        P_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE, 
        P_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE, 
        P_LAST_NAME EMPLOYEES.LAST_NAME%TYPE, 
        P_EMAIL EMPLOYEES.EMAIL%TYPE, 
        P_PHONE_NUMBER EMPLOYEES.PHONE_NUMBER%TYPE, 
        P_HIRE_DATE EMPLOYEES.HIRE_DATE%TYPE, 
        P_JOB_ID EMPLOYEES.JOB_ID%TYPE, 
        P_SALARY EMPLOYEES.SALARY%TYPE,
        P_COMMISSION_PCT EMPLOYEES.COMMISSION_PCT%TYPE, 
        P_MANAGER_ID EMPLOYEES.MANAGER_ID%TYPE, 
        P_DEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE,
        P_CODIGO_RESULTADO OUT NUMBER,
        P_MENSAJE_RESULTADO OUT VARCHAR
    ) IS
    --VARIABLES INTERNAS
        V_CANTIDAD_JOBS_VALIDOS NUMBER;
        V_DEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE;
        V_DEPARTMENT_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE;
        
        V_JOB_ID JOBS.JOB_ID%TYPE;
        V_MIN_SALARY JOBS.MIN_SALARY%TYPE;
        V_MAX_SALARY JOBS.MAX_SALARY%TYPE;
        
        V_DEPARTMENT_NOT_FOUND EXCEPTION;
    BEGIN
        BEGIN            
            SELECT JOB_ID, MIN_SALARY, MAX_SALARY
            INTO V_JOB_ID, V_MIN_SALARY, V_MAX_SALARY
            FROM JOBS
            WHERE JOB_ID = P_JOB_ID;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                P_CODIGO_RESULTADO := 1;
                P_MENSAJE_RESULTADO := 'JOB_ID NO EXISTE';
                DBMS_OUTPUT.PUT_LINE('SQLCODE: '||SQLCODE);
                DBMS_OUTPUT.PUT_LINE('SQLERRM: '||SQLERRM);
                RETURN;
        END;
        
        BEGIN
            SELECT DEPARTMENT_ID, DEPARTMENT_NAME
            INTO V_DEPARTMENT_ID, V_DEPARTMENT_NAME
            FROM DEPARTMENTS
            WHERE DEPARTMENT_ID = P_DEPARTMENT_ID;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                RAISE V_DEPARTMENT_NOT_FOUND;
                --P_CODIGO_RESULTADO := 3;
                --P_MENSAJE_RESULTADO := 'DEPARTMENT_ID NO EXISTE';
                --DBMS_OUTPUT.PUT_LINE('SQLCODE: '||SQLCODE);
                --DBMS_OUTPUT.PUT_LINE('SQLERRM: '||SQLERRM);
                --RETURN;        
        END;
        
        IF (P_SALARY NOT BETWEEN V_MIN_SALARY AND V_MAX_SALARY) THEN
            P_CODIGO_RESULTADO := 2;
            P_MENSAJE_RESULTADO := 'EL SALARIO '|| P_SALARY || ' ESTÁ FUERA DEL RANGO PERMITIDO ('||V_MIN_SALARY||' - '||V_MAX_SALARY||')';
            RETURN;
        END IF;
        
        --- SI VAMOS A INSERTAR
        insert into EMPLOYEES (
            EMPLOYEE_ID, 
            FIRST_NAME, 
            LAST_NAME, 
            EMAIL, 
            PHONE_NUMBER, 
            HIRE_DATE, 
            JOB_ID, 
            SALARY,
            COMMISSION_PCT, 
            MANAGER_ID, 
            DEPARTMENT_ID
        )
        VALUES (
            P_EMPLOYEE_ID,
            P_FIRST_NAME,
            P_LAST_NAME,
            P_EMAIL,
            P_PHONE_NUMBER,
            P_HIRE_DATE,
            P_JOB_ID,
            P_SALARY,
            P_COMMISSION_PCT,
            P_MANAGER_ID,
            P_DEPARTMENT_ID
        );
        
        COMMIT;
        P_CODIGO_RESULTADO := 0;
        P_MENSAJE_RESULTADO := 'SE INSERTÓ';
        
    EXCEPTION 
        WHEN V_DEPARTMENT_NOT_FOUND THEN
            P_CODIGO_RESULTADO := 3;
            P_MENSAJE_RESULTADO := 'DEPARTMENT_ID NO EXISTE';
            DBMS_OUTPUT.PUT_LINE('SQLCODE: '||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('SQLERRM: '||SQLERRM);
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SQLCODE: '||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('SQLERRM: '||SQLERRM);
            ROLLBACK;
    END P_INSERT;

    PROCEDURE P_UPDATE(
        P_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE, 
        P_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE, 
        P_LAST_NAME EMPLOYEES.LAST_NAME%TYPE, 
        P_EMAIL EMPLOYEES.EMAIL%TYPE, 
        P_PHONE_NUMBER EMPLOYEES.PHONE_NUMBER%TYPE, 
        P_HIRE_DATE EMPLOYEES.HIRE_DATE%TYPE, 
        P_JOB_ID EMPLOYEES.JOB_ID%TYPE, 
        P_SALARY EMPLOYEES.SALARY%TYPE,
        P_COMMISSION_PCT EMPLOYEES.COMMISSION_PCT%TYPE, 
        P_MANAGER_ID EMPLOYEES.MANAGER_ID%TYPE, 
        P_DEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE
    ) IS
    --VARIABLES INTERNAS
    BEGIN
        NULL;
    END P_UPDATE;

    PROCEDURE P_DELETE(
        P_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE
    ) IS
    BEGIN
        NULL;
    END P_DELETE;

END PKG_EMPLOYEES;